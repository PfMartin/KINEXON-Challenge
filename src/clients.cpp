// main.cpp: Martin Pfatrisch
// Description: The program sends sensor positions generated by the position generator

#include <iostream>
#include <time.h>
#include <zmq.hpp>

#include "position_generator.h"
#include "position.pb.h"


// Prototypes for used functions
struct Data3d initPosition(void);
struct Data3d updatePosition(struct Data3d);
position::GeneratedPosition setPosition(uint64_t, struct Data3d);
zmq::message_t serializeMessage(position::GeneratedPosition);

const int period = 1000;
static zmq::context_t ctx;

int main(void) {
  // Zmq socket setup
  zmq::socket_t sock(ctx, zmq::socket_type::push);
  sock.bind("tcp://127.0.0.1:5555");
  std::cout << "Binding socket to tcp://127.0.0.1:5555" << std::endl;

  struct Data3d data3d[10];
  position::GeneratedPosition genPos;
  zmq::message_t zOut;

  // Initialize all positions
  for(int i = 0; i < 10; i++) {
    data3d[i] = initPosition();

    genPos = setPosition(i, data3d[i]);
    zOut = serializeMessage(genPos);
    sock.send(zOut, zmq::send_flags::none);
  }

  // Implement frequency of 1 Hz
  std::this_thread::sleep_for(std::chrono::milliseconds(period));


  while(1) {
    for(int i = 0; i < 10; i++) {
      data3d[i] = updatePosition(data3d[i]);

      // Update the position
      genPos = setPosition(i, data3d[i]);

      zOut = serializeMessage(genPos);
      sock.send(zOut, zmq::send_flags::none);
    }

    // Implement frequency of 1 Hz
    std::this_thread::sleep_for(std::chrono::milliseconds(period));
  }

  return 0;
}


/**
 * setPosition: Updates a GeneratedPosition with a sensor id, a time stamp and values from a position
 * @param  [position::GeneratedPosition]          genPos   GeneratedPosition, that should be updated
 * @param  [uint64_t]                             sensorId Identifiert of the sensor
 * @param  [uint64_t]                             tStamp   Time stamp in seconds
 * @param  [struct Data3d]                      data3d       Data3d, which should its x, y and z coordinates to the GeneratedPosition
 * @return [position::GeneratedPosition]                   The updated GeneratedPosition
 */
position::GeneratedPosition setPosition(uint64_t sensorId, struct Data3d data3d) {
  uint64_t tStamp;
  tStamp = time(NULL);

  position::GeneratedPosition genPos;

  genPos.set_sensorid(sensorId);
  genPos.set_timestampusec(tStamp);
  genPos.mutable_position()->set_x(data3d.x);
  genPos.mutable_position()->set_y(data3d.y);
  genPos.mutable_position()->set_z(data3d.z);

  return genPos;
}


/**
 * serializeMessage: Serializes a zmq message in order to send it
 * @param   [position::GeneratedPosition]   genPos   The GeneratedPosition, that should be serialized
 * @return  [zmq::message_t]                         The serialized message ready to be send
 */
zmq::message_t serializeMessage(position::GeneratedPosition genPos) {
  std::cout << "\nSensor " << genPos.sensorid() << " initialized: " << genPos.IsInitialized() << std::endl;

  auto bytes = genPos.ByteSizeLong();
  zmq::message_t zOut(bytes);
  genPos.SerializeToArray(zOut.data(), bytes);

  std::cout << "Sending Data for Sensor " << genPos.sensorid() << std::endl;

  return zOut;
}
